import React, { useState } from 'react';
import { Send, User, Facebook, Link, MessageCircle, Upload, HelpCircle } from 'lucide-react';
import './index.css';

function App() {
  const [formData, setFormData] = useState({
    fullName: '',
    facebookLink: '',
    manusAiRefLink: '',
    slip: null
  });

  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState({ text: '', type: '' });
  const [showHelpModal, setShowHelpModal] = useState(false);

  const convertFileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const base64Data = reader.result.split(',')[1]; // Remove data:image/jpeg;base64, prefix
        console.log('Base64 conversion successful, length:', base64Data.length);
        resolve(base64Data);
      };
      reader.onerror = error => {
        console.error('Base64 conversion failed:', error);
        reject(error);
      };
    });
  };

  const handleChange = (e) => {
    const { name, value, type, files } = e.target;
    if (type === 'file') {
      setFormData(prev => ({
        ...prev,
        [name]: files[0] || null
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const validateForm = () => {
    if (!formData.fullName.trim()) {
      setMessage({ text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', type: 'error' });
      return false;
    }
    if (!formData.facebookLink.trim()) {
      setMessage({ text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Link Facebook ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', type: 'error' });
      return false;
    }
    if (!formData.manusAiRefLink.trim()) {
      setMessage({ text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå Ref. Manus AI', type: 'error' });
      return false;
    }
    if (!formData.slip) {
      setMessage({ text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', type: 'error' });
      return false;
    }
    return true;
  };

  const submitToGoogleSheets = async (data) => {
    const scriptURL = 'https://script.google.com/macros/s/AKfycbz8ROsUNqwKNP7b76J2SjCCY9eLuQSYr0lNmbSyL-lStq_S0g_ycFF_l10Or5DtSDgL8w/exec';
    
    // Convert file to Base64 if exists
    let fileBase64 = '';
    let fileName = '';
    
    if (data.slip) {
      try {
        const fileBase64Result = await convertFileToBase64(data.slip);
        fileBase64 = fileBase64Result;
        fileName = data.slip.name;
        console.log('File converted:', fileName, 'Size:', fileBase64.length);
        console.log('File type:', data.slip.type);
        console.log('First 50 chars of base64:', fileBase64.substring(0, 50));
      } catch (error) {
        console.error('File conversion error:', error);
        return;
      }
    } else {
      console.log('No file selected for upload');
    }
    
    // Send as URL encoded form data
    const formDataToSend = new URLSearchParams();
    formDataToSend.append('fullName', data.fullName);
    formDataToSend.append('facebookLink', data.facebookLink);
    formDataToSend.append('manusAiRefLink', data.manusAiRefLink);
    formDataToSend.append('fileBase64', fileBase64);
    formDataToSend.append('fileName', fileName);

    console.log('Sending data to Google Apps Script:');
    console.log('- fullName:', data.fullName);
    console.log('- facebookLink:', data.facebookLink);
    console.log('- manusAiRefLink:', data.manusAiRefLink);
    console.log('- fileName:', fileName);
    console.log('- fileBase64 length:', fileBase64.length);

    try {
      const response = await fetch(scriptURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formDataToSend.toString()
      });

      if (response.ok) {
        const responseText = await response.text();
        console.log('Response from Google Apps Script:', responseText);
        try {
          const responseData = JSON.parse(responseText);
          console.log('Parsed response:', responseData);
          return responseData;
        } catch (parseError) {
          console.error('Failed to parse response:', parseError);
          return { success: true };
        }
      } else {
        const errorText = await response.text();
        console.error('HTTP Error response:', errorText);
        throw new Error('‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + response.status);
      }
    } catch (error) {
      console.error('Error:', error);
      throw error;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage({ text: '', type: '' });

    if (!validateForm()) {
      return;
    }

    setIsLoading(true);

    try {
      await submitToGoogleSheets(formData);
      setMessage({ text: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞', type: 'success' });
      
      setFormData({
        fullName: '',
        facebookLink: '',
        manusAiRefLink: '',
        slip: null
      });
    } catch (error) {
      setMessage({ text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', type: 'error' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="app">
      <div className="main-container">
        <div className="form-container">
          <div className="header">
            <h1>‡∏Ñ‡∏¥‡∏ß‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï Manus AI</h1>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß</p>
          </div>

        <form onSubmit={handleSubmit} className="form">
          <div className="form-group">
            <label htmlFor="fullName" className="form-label">
              <User size={16} style={{ display: 'inline', marginRight: '5px' }} />
              ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *
            </label>
            <input
              type="text"
              id="fullName"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              className="form-input"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="facebookLink" className="form-label">
              <Facebook size={16} style={{ display: 'inline', marginRight: '5px' }} />
              Link Facebook ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì *
            </label>
            <input
              type="url"
              id="facebookLink"
              name="facebookLink"
              value={formData.facebookLink}
              onChange={handleChange}
              className="form-input"
              placeholder="https://facebook.com/your-profile"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="manusAiRefLink" className="form-label">
              <Link size={16} style={{ display: 'inline', marginRight: '5px' }} />
              Link Ref. Manus AI *
              <button
                type="button"
                className="help-button"
                onClick={() => setShowHelpModal(true)}
                title="‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤ Link Ref. Manus AI"
              >
                <HelpCircle size={16} />
              </button>
              <small className="help-hint">‡πÄ‡∏≠‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô</small>
            </label>
            <input
              type="url"
              id="manusAiRefLink"
              name="manusAiRefLink"
              value={formData.manusAiRefLink}
              onChange={handleChange}
              className="form-input"
              placeholder="https://manus.ai/ref/your-ref-code"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="slip" className="form-label">
              <Upload size={16} style={{ display: 'inline', marginRight: '5px' }} />
              ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß *
            </label>
            <input
              type="file"
              id="slip"
              name="slip"
              onChange={handleChange}
              className="form-input file-input"
              accept="image/*"
              required
            />
            {formData.slip && (
              <div className="file-preview">
                <span>üìé {formData.slip.name}</span>
              </div>
            )}
          </div>

          <button
            type="submit"
            className="submit-button"
            disabled={isLoading}
          >
            {isLoading ? (
              <span className="loading">
                <span className="spinner"></span>
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
              </span>
            ) : (
              <>
                <Send size={20} style={{ marginRight: '8px' }} />
                ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </>
            )}
          </button>

          {message.text && (
            <div className={message.type === 'success' ? 'success-message' : 'error-message'}>
              {message.text}
            </div>
          )}

          <div className="button-group">
            <button
              type="button"
              className="line-button"
              onClick={() => window.open('https://line.me/ti/p/@beerfreedom', '_blank')}
            >
              <MessageCircle size={20} style={{ marginRight: '8px' }} />
              ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏î‡πà‡∏ß‡∏ô ‡πÅ‡∏≠‡∏î‡πÑ‡∏•‡∏ô‡πå @beerfreedom
            </button>
          </div>
        </form>
        </div>
        
        <div className="info-container">
          <div className="pricing-card">
            <div className="price-highlight">
              <span className="price">1,900 ‡∏ö‡∏≤‡∏ó</span>
              <span className="credits">‡∏ú‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ 50,000 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏õ‡πÅ‡∏ö‡∏ö‡∏à‡∏∏‡∏Å‡πÜ</span>
            </div>
            
            <div className="comparison">
              <p>üìä <strong>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏≠‡∏á:</strong> ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏™‡∏≤‡∏°‡∏´‡∏°‡∏∑‡πà‡∏ô‡∏ö‡∏≤‡∏ó</p>
              <p>üí° <strong>‡πÄ‡∏≠‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏™‡∏∏‡∏î‡πÜ:</strong> ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÜ</p>
            </div>
            
            <div className="guarantee">
              <p>‚úÖ <strong>‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß:</strong></p>
              <p>‡∏ô‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏•‡∏Å!</p>
            </div>

            <div className="payment-info">
              <div className="bank-details">
                <p><strong>üè¶ ‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢ | üì± ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå:</strong> 0809898949</p>
                <p><strong>üë§ ‡∏î‡∏ô‡∏±‡∏¢‡∏ä‡∏ô‡∏Å ‡∏≠‡∏¥‡πà‡∏°‡∏ä‡∏∏‡πà‡∏° | üíµ</strong> 1,900 ‡∏ö‡∏≤‡∏ó</p>
              </div>
              
              <div className="qr-code-section">
                <div className="qr-code-container">
                  <img src="/qr-payment.png" alt="QR Code Payment" className="qr-code-image" />
                </div>
              </div>
            </div>
            
            <div className="features">
              <h3>üéØ ‡πÑ‡∏î‡πâ‡∏≠‡∏∞‡πÑ‡∏£?</h3>
              <ul>
                <li>50,000 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï Manus AI</li>
                <li>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</li>
                <li>‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏≠‡∏á 20 ‡πÄ‡∏ó‡πà‡∏≤!</li>
                <li>‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Help Modal */}
        {showHelpModal && (
          <div className="modal-overlay" onClick={() => setShowHelpModal(false)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h3>üîó ‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤ Link Ref. Manus AI</h3>
                <button className="modal-close" onClick={() => setShowHelpModal(false)}>√ó</button>
              </div>
              <div className="modal-body">
                <div className="help-image-container">
                  <img src="/manus-ref-help.png" alt="‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤ Link Ref Manus AI" className="help-image" />
                </div>
                
                <div className="help-instructions">
                  <h4>üîó ‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤ Link Referral ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</h4>
                  
                  <div className="step-box">
                    <h5>üìç ‡πÄ‡∏≠‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô:</h5>
                    <ul>
                      <li><strong>‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ Manus AI:</strong> ‡πÄ‡∏°‡∏ô‡∏π "Referral" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"</li>
                      <li><strong>‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå:</strong> ‡∏´‡∏ô‡πâ‡∏≤ Profile ‚Üí Referral Program</li>
                      <li><strong>‡∏´‡∏£‡∏∑‡∏≠:</strong> Settings ‚Üí My Referral Link</li>
                    </ul>
                  </div>

                  <div className="step-box">
                    <h5>üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥:</h5>
                    <ol>
                      <li>‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ Manus AI ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</li>
                      <li>Login ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</li>
                      <li>‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π "Referral" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"</li>
                      <li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Link Referral ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</li>
                      <li>‡∏ô‡∏≥‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</li>
                    </ol>
                  </div>

                  <div className="tip-box">
                    <p>üí° <strong>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</strong> Link ‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ https://manus.ai/ref/[‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì]</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;